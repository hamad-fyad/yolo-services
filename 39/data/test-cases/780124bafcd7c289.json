{"uid":"780124bafcd7c289","name":"test_get_prediction_by_uid_success","fullName":"tests.test_prediction_by_uid.TestGetPredictionByUid#test_get_prediction_by_uid_success","historyId":"b082ed5bc25d62f354cbd888efba99fd","time":{"start":1756973366644,"stop":1756973366777,"duration":133},"status":"broken","statusMessage":"KeyError: 'prediction_uid'","statusTrace":"self = <tests.test_prediction_by_uid.TestGetPredictionByUid testMethod=test_get_prediction_by_uid_success>\n\n    def setUp(self):\n        self.client = TestClient(app)\n    \n        # Reset and initialize DB\n        init_db()\n        self.auth_headers = get_auth_headers(\"test\", \"password\")\n    \n        # Create test image\n        self.test_image = Image.new('RGB', (100, 100), color='red')\n        self.image_bytes = io.BytesIO()\n        self.test_image.save(self.image_bytes, format='JPEG')\n        self.image_bytes.seek(0)\n    \n        # Generate a prediction to get UID\n        response = self.client.post(\n            \"/predict\",\n            headers=self.auth_headers,\n            files={\"file\": (\"test.jpg\", self.image_bytes, \"image/jpeg\")}\n        )\n        print(response.json())\n>       self.prediction_uid = response.json()[\"prediction_uid\"]\nE       KeyError: 'prediction_uid'\n\ntests/test_prediction_by_uid.py:32: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TestGetPredictionByUid","time":{"start":1756973366505,"stop":1756973366505,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"KeyError: 'prediction_uid'","statusTrace":"self = <tests.test_prediction_by_uid.TestGetPredictionByUid testMethod=test_get_prediction_by_uid_success>\n\n    def setUp(self):\n        self.client = TestClient(app)\n    \n        # Reset and initialize DB\n        init_db()\n        self.auth_headers = get_auth_headers(\"test\", \"password\")\n    \n        # Create test image\n        self.test_image = Image.new('RGB', (100, 100), color='red')\n        self.image_bytes = io.BytesIO()\n        self.test_image.save(self.image_bytes, format='JPEG')\n        self.image_bytes.seek(0)\n    \n        # Generate a prediction to get UID\n        response = self.client.post(\n            \"/predict\",\n            headers=self.auth_headers,\n            files={\"file\": (\"test.jpg\", self.image_bytes, \"image/jpeg\")}\n        )\n        print(response.json())\n>       self.prediction_uid = response.json()[\"prediction_uid\"]\nE       KeyError: 'prediction_uid'\n\ntests/test_prediction_by_uid.py:32: KeyError","steps":[],"attachments":[{"uid":"72cc71251c3aa92e","name":"stdout","source":"72cc71251c3aa92e.txt","type":"text/plain","size":408}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"_unittest_setUpClass_fixture_TestGetPredictionByUid::0","time":{"start":1756973366781,"stop":1756973366781,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_prediction_by_uid"},{"name":"subSuite","value":"TestGetPredictionByUid"},{"name":"host","value":"pkrvm7jw40e0xgp"},{"name":"thread","value":"2278-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_prediction_by_uid"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"780124bafcd7c289.json","parameterValues":[]}