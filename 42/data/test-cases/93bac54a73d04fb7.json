{"uid":"93bac54a73d04fb7","name":"test_get_predictions_by_score_valid","fullName":"tests.test_prediction_min_score.TestGetPredictionsByScore#test_get_predictions_by_score_valid","historyId":"cc29f7c730ebb5bde393632ac780fb19","time":{"start":1757579783494,"stop":1757579783624,"duration":130},"status":"failed","statusMessage":"AssertionError: 500 != 200","statusTrace":"self = <tests.test_prediction_min_score.TestGetPredictionsByScore testMethod=test_get_predictions_by_score_valid>\n\n    def setUp(self):\n        self.client = TestClient(app)\n    \n    \n        init_db()\n        self.auth_headers = get_auth_headers(\"test\", \"password\")\n    \n        self.test_image = Image.new('RGB', (100, 100), color='red')\n        self.image_bytes = io.BytesIO()\n        self.test_image.save(self.image_bytes, format='JPEG')\n        self.image_bytes.seek(0)\n    \n        # Trigger a prediction to populate data\n        response = self.client.post(\n            \"/predict\",\n            headers=self.auth_headers,\n            files={\"file\": (\"test.jpg\", self.image_bytes, \"image/jpeg\")}\n        )\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 500 != 200\n\ntests/test_prediction_min_score.py:34: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TestGetPredictionsByScore","time":{"start":1757579783356,"stop":1757579783356,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: 500 != 200","statusTrace":"self = <tests.test_prediction_min_score.TestGetPredictionsByScore testMethod=test_get_predictions_by_score_valid>\n\n    def setUp(self):\n        self.client = TestClient(app)\n    \n    \n        init_db()\n        self.auth_headers = get_auth_headers(\"test\", \"password\")\n    \n        self.test_image = Image.new('RGB', (100, 100), color='red')\n        self.image_bytes = io.BytesIO()\n        self.test_image.save(self.image_bytes, format='JPEG')\n        self.image_bytes.seek(0)\n    \n        # Trigger a prediction to populate data\n        response = self.client.post(\n            \"/predict\",\n            headers=self.auth_headers,\n            files={\"file\": (\"test.jpg\", self.image_bytes, \"image/jpeg\")}\n        )\n>       self.assertEqual(response.status_code, 200)\nE       AssertionError: 500 != 200\n\ntests/test_prediction_min_score.py:34: AssertionError","steps":[],"attachments":[{"uid":"53ab236328ba2d5","name":"stdout","source":"53ab236328ba2d5.txt","type":"text/plain","size":341}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"_unittest_setUpClass_fixture_TestGetPredictionsByScore::0","time":{"start":1757579783628,"stop":1757579783629,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_prediction_min_score"},{"name":"subSuite","value":"TestGetPredictionsByScore"},{"name":"host","value":"runnervmf4ws1"},{"name":"thread","value":"2178-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_prediction_min_score"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"93bac54a73d04fb7.json","parameterValues":[]}