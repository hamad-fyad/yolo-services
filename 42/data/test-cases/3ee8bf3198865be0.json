{"uid":"3ee8bf3198865be0","name":"test_labels_after_prediction","fullName":"tests.test_labels.Test_labels#test_labels_after_prediction","historyId":"b1368712bfb2f4fbce4322c738f42fed","time":{"start":1757579779767,"stop":1757579780978,"duration":1211},"description":"Test prediction endpoint using an image from Pixabay.","descriptionHtml":"<p>Test prediction endpoint using an image from Pixabay.</p>\n","status":"failed","statusMessage":"AssertionError: 500 != 200 : Prediction failed","statusTrace":"self = <tests.test_labels.Test_labels testMethod=test_labels_after_prediction>\n\n    def test_labels_after_prediction(self):\n        \"\"\"Test prediction endpoint using an image from Pixabay.\"\"\"\n    \n        # Step 1: Call Pixabay API\n        pixabay_api_url = f\"https://pixabay.com/api/?key={api_key}&q=person&image_type=photo\"\n        api_response = requests.get(pixabay_api_url)\n        self.assertEqual(api_response.status_code, 200, \"Pixabay API call failed\")\n    \n        hits = api_response.json().get(\"hits\")\n        self.assertTrue(hits, \"No image results from Pixabay\")\n    \n    \n        image_url = hits[0][\"largeImageURL\"]\n    \n    \n        image_response = requests.get(image_url)\n        self.assertEqual(image_response.status_code, 200, \"Failed to download image from Pixabay\")\n    \n    \n        image_bytes = io.BytesIO(image_response.content)\n    \n    \n        response = self.client.post(\n            \"/predict\",\n            files={\"file\": (\"test.png\", image_bytes, \"image/png\")},\n        )\n>       self.assertEqual(response.status_code, 200, \"Prediction failed\")\nE       AssertionError: 500 != 200 : Prediction failed\n\ntests/test_labels.py:59: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_Test_labels","time":{"start":1757579779766,"stop":1757579779766,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Test prediction endpoint using an image from Pixabay.","status":"failed","statusMessage":"AssertionError: 500 != 200 : Prediction failed","statusTrace":"self = <tests.test_labels.Test_labels testMethod=test_labels_after_prediction>\n\n    def test_labels_after_prediction(self):\n        \"\"\"Test prediction endpoint using an image from Pixabay.\"\"\"\n    \n        # Step 1: Call Pixabay API\n        pixabay_api_url = f\"https://pixabay.com/api/?key={api_key}&q=person&image_type=photo\"\n        api_response = requests.get(pixabay_api_url)\n        self.assertEqual(api_response.status_code, 200, \"Pixabay API call failed\")\n    \n        hits = api_response.json().get(\"hits\")\n        self.assertTrue(hits, \"No image results from Pixabay\")\n    \n    \n        image_url = hits[0][\"largeImageURL\"]\n    \n    \n        image_response = requests.get(image_url)\n        self.assertEqual(image_response.status_code, 200, \"Failed to download image from Pixabay\")\n    \n    \n        image_bytes = io.BytesIO(image_response.content)\n    \n    \n        response = self.client.post(\n            \"/predict\",\n            files={\"file\": (\"test.png\", image_bytes, \"image/png\")},\n        )\n>       self.assertEqual(response.status_code, 200, \"Prediction failed\")\nE       AssertionError: 500 != 200 : Prediction failed\n\ntests/test_labels.py:59: AssertionError","steps":[],"attachments":[{"uid":"265f373e7d2c759f","name":"stdout","source":"265f373e7d2c759f.txt","type":"text/plain","size":332}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"_unittest_setUpClass_fixture_Test_labels::0","time":{"start":1757579781017,"stop":1757579781017,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_labels"},{"name":"subSuite","value":"Test_labels"},{"name":"host","value":"runnervmf4ws1"},{"name":"thread","value":"2178-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_labels"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"3ee8bf3198865be0.json","parameterValues":[]}