{"uid":"ae17e2f95e43d35c","name":"test_get_predictions_by_invalid_label","fullName":"tests.test_prediction_by_lable.TestGetPredictionsByLabel#test_get_predictions_by_invalid_label","historyId":"99efe9f8c5ae6a02c63d671603c55034","time":{"start":1757580125264,"stop":1757580126133,"duration":869},"status":"broken","statusMessage":"KeyError: 'prediction_uid'","statusTrace":"self = <tests.test_prediction_by_lable.TestGetPredictionsByLabel testMethod=test_get_predictions_by_invalid_label>\n\n    def setUp(self):\n        self.client = TestClient(app)\n    \n        init_db()\n        res = self.client.post(\"/signup\", json={\"username\": \"test\", \"password\": \"password\"})\n        self.auth_headers = get_auth_headers(\"test\", \"password\")\n    \n        pixabay_api_url = f\"https://pixabay.com/api/?key={api_key}&q=person&image_type=photo\"\n        api_response = requests.get(pixabay_api_url)\n        self.assertEqual(api_response.status_code, 200, \"Pixabay API call failed\")\n    \n        hits = api_response.json().get(\"hits\")\n        self.assertTrue(hits, \"No image results from Pixabay\")\n    \n    \n        image_url = hits[0][\"largeImageURL\"]\n    \n    \n        image_response = requests.get(image_url)\n        self.assertEqual(image_response.status_code, 200, \"Failed to download image from Pixabay\")\n    \n    \n        self.image_bytes = io.BytesIO(image_response.content)\n    \n    \n        # Perform a prediction to insert data\n        response = self.client.post(\n            \"/predict\",\n            headers=self.auth_headers,\n            files={\"file\": (\"test.jpg\", self.image_bytes, \"image/jpeg\")}\n        )\n>       self.prediction_uid = response.json()[\"prediction_uid\"]\nE       KeyError: 'prediction_uid'\n\ntests/test_prediction_by_lable.py:53: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TestGetPredictionsByLabel","time":{"start":1757580125263,"stop":1757580125263,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"KeyError: 'prediction_uid'","statusTrace":"self = <tests.test_prediction_by_lable.TestGetPredictionsByLabel testMethod=test_get_predictions_by_invalid_label>\n\n    def setUp(self):\n        self.client = TestClient(app)\n    \n        init_db()\n        res = self.client.post(\"/signup\", json={\"username\": \"test\", \"password\": \"password\"})\n        self.auth_headers = get_auth_headers(\"test\", \"password\")\n    \n        pixabay_api_url = f\"https://pixabay.com/api/?key={api_key}&q=person&image_type=photo\"\n        api_response = requests.get(pixabay_api_url)\n        self.assertEqual(api_response.status_code, 200, \"Pixabay API call failed\")\n    \n        hits = api_response.json().get(\"hits\")\n        self.assertTrue(hits, \"No image results from Pixabay\")\n    \n    \n        image_url = hits[0][\"largeImageURL\"]\n    \n    \n        image_response = requests.get(image_url)\n        self.assertEqual(image_response.status_code, 200, \"Failed to download image from Pixabay\")\n    \n    \n        self.image_bytes = io.BytesIO(image_response.content)\n    \n    \n        # Perform a prediction to insert data\n        response = self.client.post(\n            \"/predict\",\n            headers=self.auth_headers,\n            files={\"file\": (\"test.jpg\", self.image_bytes, \"image/jpeg\")}\n        )\n>       self.prediction_uid = response.json()[\"prediction_uid\"]\nE       KeyError: 'prediction_uid'\n\ntests/test_prediction_by_lable.py:53: KeyError","steps":[],"attachments":[{"uid":"d2fc81cbedc939c9","name":"stdout","source":"d2fc81cbedc939c9.txt","type":"text/plain","size":332}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"_unittest_setUpClass_fixture_TestGetPredictionsByLabel::0","time":{"start":1757580126930,"stop":1757580126930,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_prediction_by_lable"},{"name":"subSuite","value":"TestGetPredictionsByLabel"},{"name":"host","value":"runnervmf4ws1"},{"name":"thread","value":"2184-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_prediction_by_lable"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"ae17e2f95e43d35c.json","parameterValues":[]}